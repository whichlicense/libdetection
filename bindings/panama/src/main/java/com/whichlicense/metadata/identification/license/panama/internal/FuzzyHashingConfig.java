// Generated by jextract

package com.whichlicense.metadata.identification.license.panama.internal;

import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.foreign.StructLayout;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct FuzzyHashingConfig {
 *     LicenseIndex index;
 *     _Bool exit_on_exact_match;
 *     CNormalizationFn normalization_fn;
 * };
 *}
 */
public class FuzzyHashingConfig {
    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("index"),
            Constants$root.C_BOOL$LAYOUT.withName("exit_on_exact_match"),
            MemoryLayout.paddingLayout(56),
            Constants$root.C_POINTER$LAYOUT.withName("normalization_fn")
    ).withName("FuzzyHashingConfig");
    static final VarHandle index$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("index"));
    static final VarHandle exit_on_exact_match$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("exit_on_exact_match"));
    static final VarHandle normalization_fn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("normalization_fn"));

    public static MemoryLayout $LAYOUT() {
        return FuzzyHashingConfig.$struct$LAYOUT;
    }

    /**
     * Setter for field:
     * {@snippet :
     * LicenseIndex index;
     *}
     */
    public static void index$set(MemorySegment seg, MemorySegment x) {
        FuzzyHashingConfig.index$VH.set(seg, x);
    }

    /**
     * Setter for field:
     * {@snippet :
     * _Bool exit_on_exact_match;
     *}
     */
    public static void exit_on_exact_match$set(MemorySegment seg, boolean x) {
        FuzzyHashingConfig.exit_on_exact_match$VH.set(seg, x);
    }

    /**
     * Setter for field:
     * {@snippet :
     * CNormalizationFn normalization_fn;
     *}
     */
    public static void normalization_fn$set(MemorySegment seg, MemorySegment x) {
        FuzzyHashingConfig.normalization_fn$VH.set(seg, x);
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }
}
