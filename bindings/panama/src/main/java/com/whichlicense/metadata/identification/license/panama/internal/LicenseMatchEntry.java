// Generated by jextract

package com.whichlicense.metadata.identification.license.panama.internal;

import com.whichlicense.foreign.ForeignRuntimeHelper;

import java.lang.foreign.*;
import java.lang.foreign.MemoryLayout.PathElement;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct LicenseMatchEntry {
 *     char* name;
 *     float confidence;
 * };
 *}
 */
public class LicenseMatchEntry {
    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("name"),
            Constants$root.C_FLOAT$LAYOUT.withName("confidence"),
            MemoryLayout.paddingLayout(32)
    ).withName("LicenseMatchEntry");
    static final VarHandle name$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("name"));
    static final VarHandle confidence$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("confidence"));

    public static MemoryLayout $LAYOUT() {
        return LicenseMatchEntry.$struct$LAYOUT;
    }

    /**
     * Getter for field:
     * {@snippet :
     * char* name;
     *}
     */
    public static MemorySegment name$get(MemorySegment seg) {
        return (MemorySegment) LicenseMatchEntry.name$VH.get(seg);
    }

    /**
     * Getter for field:
     * {@snippet :
     * float confidence;
     *}
     */
    public static float confidence$get(MemorySegment seg) {
        return (float) LicenseMatchEntry.confidence$VH.get(seg);
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment arrayOfAddress(MemorySegment addr, long numElements, SegmentScope scope) {
        return ForeignRuntimeHelper.asArray(addr, $LAYOUT(), numElements, scope);
    }
}
