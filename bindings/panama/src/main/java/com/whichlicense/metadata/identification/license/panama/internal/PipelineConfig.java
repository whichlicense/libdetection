// Generated by jextract

package com.whichlicense.metadata.identification.license.panama.internal;

import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.foreign.StructLayout;
import java.lang.invoke.VarHandle;

import static java.lang.foreign.ValueLayout.PathElement;

/**
 * {@snippet :
 * struct PipelineConfig {
 *     void* steps;
 *     uintptr_t length;
 *     float threshold;
 * };
 *}
 */
public class PipelineConfig {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("steps"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("length"),
            Constants$root.C_FLOAT$LAYOUT.withName("threshold"),
            MemoryLayout.paddingLayout(32)
    ).withName("PipelineConfig");
    static final VarHandle steps$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("steps"));
    static final VarHandle length$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("length"));
    static final VarHandle threshold$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("threshold"));

    public static MemoryLayout $LAYOUT() {
        return PipelineConfig.$struct$LAYOUT;
    }

    public static void steps$set(MemorySegment seg, long index, MemorySegment x) {
        PipelineConfig.steps$VH.set(seg.asSlice(index * sizeof()), x);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uintptr_t length;
     *}
     */
    public static void length$set(MemorySegment seg, long x) {
        PipelineConfig.length$VH.set(seg, x);
    }

    /**
     * Setter for field:
     * {@snippet :
     * float threshold;
     *}
     */
    public static void threshold$set(MemorySegment seg, float x) {
        PipelineConfig.threshold$VH.set(seg, x);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }
}
